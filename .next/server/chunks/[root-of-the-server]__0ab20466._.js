module.exports=[70406,(e,t,r)=>{t.exports=e.x("next/dist/compiled/@opentelemetry/api",()=>require("next/dist/compiled/@opentelemetry/api"))},22734,(e,t,r)=>{t.exports=e.x("fs",()=>require("fs"))},36430,(e,t,r)=>{t.exports=e.x("cloudinary",()=>require("cloudinary"))},93635,e=>e.a(async(t,r)=>{try{let t=await e.y("formidable");e.n(t),r()}catch(e){r(e)}},!0),51908,e=>e.a(async(t,r)=>{try{var a=e.i(36430),i=e.i(93635),n=e.i(22734),o=t([i]);async function s(e,t){"POST"===e.method?(0,i.default)({}).parse(e,async(e,r,i)=>{if(e)return void t.status(500).json({error:"Error parsing the form data"});let o=i.file;if(!o)return void t.status(400).json({error:"No file found in the request"});try{let e=await a.v2.uploader.upload(o.filepath,{folder:"messaging-app"});n.default.unlinkSync(o.filepath),t.status(200).json({fileUrl:e.secure_url,fileName:e.original_filename})}catch(e){console.error("Error uploading to Cloudinary:",e),t.status(500).json({error:"Error uploading to Cloudinary"})}}):(t.setHeader("Allow",["POST"]),t.status(405).end(`Method ${e.method} Not Allowed`))}[i]=o.then?(await o)():o,a.v2.config({cloud_name:process.env.CLOUDINARY_CLOUD_NAME,api_key:process.env.CLOUDINARY_API_KEY,api_secret:process.env.CLOUDINARY_API_SECRET}),e.s(["config",0,{api:{bodyParser:!1}},"default",()=>s]),r()}catch(e){r(e)}},!1),47615,e=>e.a(async(t,r)=>{try{var a=e.i(26747),i=e.i(90406),n=e.i(44898),o=e.i(62950),s=e.i(51908),l=e.i(7031),d=e.i(81927),u=e.i(46432),p=t([s]);[s]=p.then?(await p)():p;let f=(0,o.hoist)(s,"default"),h=(0,o.hoist)(s,"config"),v=new n.PagesAPIRouteModule({definition:{kind:i.RouteKind.PAGES_API,page:"/api/upload",pathname:"/api/upload",bundlePath:"",filename:""},userland:s,distDir:".next",relativeProjectDir:""});async function c(e,t,r){v.isDev&&(0,u.addRequestMeta)(e,"devRequestTimingInternalsEnd",process.hrtime.bigint());let i="/api/upload";i=i.replace(/\/index$/,"")||"/";let n=await v.prepare(e,t,{srcPage:i});if(!n){t.statusCode=400,t.end("Bad Request"),null==r.waitUntil||r.waitUntil.call(r,Promise.resolve());return}let{query:o,params:s,prerenderManifest:p,routerServerContext:c}=n;try{let r=e.method||"GET",a=(0,l.getTracer)(),n=a.getActiveScopeSpan(),u=v.instrumentationOnRequestError.bind(v),f=async n=>v.render(e,t,{query:{...o,...s},params:s,allowedRevalidateHeaderKeys:[],multiZoneDraftMode:!1,trustHostHeader:!1,previewProps:p.preview,propagateError:!1,dev:v.isDev,page:"/api/upload",internalRevalidate:null==c?void 0:c.revalidate,onError:(...t)=>u(e,...t)}).finally(()=>{if(!n)return;n.setAttributes({"http.status_code":t.statusCode,"next.rsc":!1});let e=a.getRootSpanAttributes();if(!e)return;if(e.get("next.span_type")!==d.BaseServerSpan.handleRequest)return void console.warn(`Unexpected root span type '${e.get("next.span_type")}'. Please report this Next.js issue https://github.com/vercel/next.js`);let o=e.get("next.route");if(o){let e=`${r} ${o}`;n.setAttributes({"next.route":o,"http.route":o,"next.span_name":e}),n.updateName(e)}else n.updateName(`${r} ${i}`)});n?await f(n):await a.withPropagatedContext(e.headers,()=>a.trace(d.BaseServerSpan.handleRequest,{spanName:`${r} ${i}`,kind:l.SpanKind.SERVER,attributes:{"http.method":r,"http.target":e.url}},f))}catch(e){if(v.isDev)throw e;(0,a.sendError)(t,500,"Internal Server Error")}finally{null==r.waitUntil||r.waitUntil.call(r,Promise.resolve())}}e.s(["config",0,h,"default",0,f,"handler",()=>c]),r()}catch(e){r(e)}},!1)];

//# sourceMappingURL=%5Broot-of-the-server%5D__0ab20466._.js.map