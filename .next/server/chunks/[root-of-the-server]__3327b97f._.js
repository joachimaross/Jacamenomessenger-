module.exports=[70406,(e,t,r)=>{t.exports=e.x("next/dist/compiled/@opentelemetry/api",()=>require("next/dist/compiled/@opentelemetry/api"))},83722,e=>{"use strict";var t=e.i(26747),r=e.i(90406),a=e.i(44898),i=e.i(62950);let s=[];function n(e,t){if("POST"===e.method){let r=e.body;s.push(r),t.status(201).json({message:"Subscription saved."})}else t.setHeader("Allow",["POST"]),t.status(405).end(`Method ${e.method} Not Allowed`)}e.s(["default",()=>n],28070);var o=e.i(28070),l=e.i(7031),d=e.i(81927),u=e.i(46432);let p=(0,i.hoist)(o,"default"),c=(0,i.hoist)(o,"config"),h=new a.PagesAPIRouteModule({definition:{kind:r.RouteKind.PAGES_API,page:"/api/subscribe",pathname:"/api/subscribe",bundlePath:"",filename:""},userland:o,distDir:".next",relativeProjectDir:""});async function m(e,r,a){h.isDev&&(0,u.addRequestMeta)(e,"devRequestTimingInternalsEnd",process.hrtime.bigint());let i="/api/subscribe";i=i.replace(/\/index$/,"")||"/";let s=await h.prepare(e,r,{srcPage:i});if(!s){r.statusCode=400,r.end("Bad Request"),null==a.waitUntil||a.waitUntil.call(a,Promise.resolve());return}let{query:n,params:o,prerenderManifest:p,routerServerContext:c}=s;try{let t=e.method||"GET",a=(0,l.getTracer)(),s=a.getActiveScopeSpan(),u=h.instrumentationOnRequestError.bind(h),m=async s=>h.render(e,r,{query:{...n,...o},params:o,allowedRevalidateHeaderKeys:[],multiZoneDraftMode:!1,trustHostHeader:!1,previewProps:p.preview,propagateError:!1,dev:h.isDev,page:"/api/subscribe",internalRevalidate:null==c?void 0:c.revalidate,onError:(...t)=>u(e,...t)}).finally(()=>{if(!s)return;s.setAttributes({"http.status_code":r.statusCode,"next.rsc":!1});let e=a.getRootSpanAttributes();if(!e)return;if(e.get("next.span_type")!==d.BaseServerSpan.handleRequest)return void console.warn(`Unexpected root span type '${e.get("next.span_type")}'. Please report this Next.js issue https://github.com/vercel/next.js`);let n=e.get("next.route");if(n){let e=`${t} ${n}`;s.setAttributes({"next.route":n,"http.route":n,"next.span_name":e}),s.updateName(e)}else s.updateName(`${t} ${i}`)});s?await m(s):await a.withPropagatedContext(e.headers,()=>a.trace(d.BaseServerSpan.handleRequest,{spanName:`${t} ${i}`,kind:l.SpanKind.SERVER,attributes:{"http.method":t,"http.target":e.url}},m))}catch(e){if(h.isDev)throw e;(0,t.sendError)(r,500,"Internal Server Error")}finally{null==a.waitUntil||a.waitUntil.call(a,Promise.resolve())}}e.s(["config",0,c,"default",0,p,"handler",()=>m],83722)}];

//# sourceMappingURL=%5Broot-of-the-server%5D__3327b97f._.js.map